class Warrior(Human):
    def init(self, name: str):
        super().init(name)
        self._max_hp = 150
        self._hp = 150
        self._strength = 15
        self._agility = 8
        self._intelligence = 5
    
    def attack(self, target: 'Human') -> str:
        """Воин имеет повышенный шанс крита"""
        if not self.is_alive:
            return f"{self.name} не может атаковать, так как мёртв!"
        
        base_damage = self._strength
        # Воин имеет 30% шанс крита
        is_critical = random.random() < 0.3
        if is_critical:
            base_damage *= 2
        
        actual_damage = target.take_damage(base_damage)
        
        if is_critical:
            return f"⚡ СИЛЬНЫЙ УДАР! {self.name} атакует {target.name} и наносит {actual_damage} урона!"
        else:
            return f"{self.name} атакует {target.name} и наносит {actual_damage} урона"
    
    def special_skill(self, targets: List['Human']) -> str:
        """Разрубающий удар - атака по всем целям"""
        if self._mp < 20:
            return f"Недостаточно MP для использования Разрубающего удара!"
        
        self._mp -= 20
        results = [f"{self.name} использует Разрубающий удар!"] 
        
        for target in targets:
            if target.is_alive:
                damage = self._strength // 2
                actual_damage = target.take_damage(damage)
                results.append(f"Наносит {actual_damage} урона {target.name}")
        
        return " ".join(results)

class Mage(Human):
    def init(self, name: str):
        super().init(name)
        self._max_hp = 80
        self._hp = 80
        self._max_mp = 100
        self._mp = 100
        self._strength = 5
        self._agility = 8
        self._intelligence = 18
    
    def attack(self, target: 'Human') -> str:
        """Маг атакует магией"""
        if not self.is_alive:
            return f"{self.name} не может атаковать, так как мёртв!"
        
        base_damage = self._intelligence // 2
        actual_damage = target.take_damage(base_damage)
        
        return f"{self.name} бросает магический снаряд в {target.name} и наносит {actual_damage} урона"
    
    def special_skill(self, targets: List['Human']) -> str:
        """Огненный шар - мощная атака по одной цели с поджогом"""
        if self._mp < 30:
            return f"Недостаточно MP для использования Огненного шара!"
        
        if not targets:
            return "Нет целей для атаки!"
        
        self._mp -= 30
        target = targets[0]
        
        if not target.is_alive:
            return "Цель мертва!"
        
        base_damage = self._intelligence
        actual_damage = target.take_damage(base_damage)
        
        # Добавляем эффект горения
        poison_effect = Effect("Горение", EffectType.POISON, 3, 5)
        target.add_effect(poison_effect)
        
        return (f"{self.name} запускает Огненный шар в {target.name}! "
                f"Наносит {actual_damage} урона и поджигает цель")

class Healer(Human):
    def init(self, name: str):
        super().init(name)
        self._max_hp = 90
        self._hp = 90
        self._max_mp = 80
        self._mp = 80
        self._strength = 6
        self._agility = 10
        self._intelligence = 15
    
    def attack(self, target: 'Human') -> str:
        """Лекарь атакует посохом"""
        if not self.is_alive:
            return f"{self.name} не может атаковать, так как мёртв!"
        
        base_damage = max(self._strength, self._intelligence // 3)
        actual_damage = target.take_damage(base_damage)
        
        return f"{self.name} бьёт посохом {target.name} и наносит {actual_damage} урона"
    
    def special_skill(self, targets: List['Human']) -> str:
        """Исцеление - восстанавливает HP союзникам"""
