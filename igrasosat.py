class Game:
    def init(self):
        self.party: List[Human] = []
        self.boss: Optional[Boss] = None
        self.turn_count = 0
    
    def nastroyka_game(self):
        print("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—É '–ü–∞—Ç–∏ –ø—Ä–æ—Ç–∏–≤ –ë–æ—Å—Å–∞'!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –∏–∑ 3 –≥–µ—Ä–æ–µ–≤:")
        
        hero_classes = {
            '1': ('–í–æ–∏–Ω', Warrior),
            '2': ('–ú–∞–≥', Mage),
            '3': ('–õ–µ–∫–∞—Ä—å', Healer)
        }
        
        for i in range(3):
            print(f"\n–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ—Ä–æ—è #{i + 1}:")
            print("1 - –í–æ–∏–Ω (–º–Ω–æ–≥–æ HP, —Å–∏–ª—å–Ω—ã–µ –∞—Ç–∞–∫–∏)")
            print("2 - –ú–∞–≥ (–º–Ω–æ–≥–æ MP, –º–∞–≥–∏—á–µ—Å–∫–∏–µ –∞—Ç–∞–∫–∏)")  
            print("3 - –õ–µ–∫–∞—Ä—å (–∏—Å—Ü–µ–ª–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞)")
            
            while True:
                choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å (1-3): ").strip()
                if choice in hero_classes:
                    class_name, class_obj = hero_classes[choice]
                    name = input(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è {class_name}: ").strip()
                    hero = class_obj(name)
                    self.party.append(hero)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω {class_name}: {name}")
                    break
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        self.boss = Boss("–î—Ä–∞–∫–æ–Ω –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å", 5)
        print(f"\n‚ö° –ë–æ—Å—Å —Å–æ–∑–¥–∞–Ω: {self.boss.name}")
    
    def raschet_iniciativa(self) -> List[Human]:
        all_combatants = self.party + [self.boss]
        alive_combatants = [c for c in all_combatants if c.is_alive]
        return sorted(alive_combatants, key=lambda x: x.iniciativa, reverse=True)
    
    def party_is_alive(self) -> bool:
        return any(hero.is_alive for hero in self.party)
    
    def display_status(self):
        print(f"\n{'='*50}")
        print(f"–•–æ–¥ #{self.turn_count}")
        print(f"{'='*50}")
        
        print("üë• –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞:")
        for i, hero in enumerate(self.party, 1):
            status = "üíÄ –ú–ï–†–¢–í" if not hero.is_alive else "‚ù§Ô∏è –ñ–ò–í"
            print(f"  {i}. {hero} [{status}]")
        
        boss_status = "üíÄ –ú–ï–†–¢–í" if not self.boss.is_alive else "‚ù§Ô∏è –ñ–ò–í"
        print(f"\nüëπ –ë–æ—Å—Å: {self.boss} [{boss_status}]")
        print(f"{'='*50}")
    
    def player_turn(self, hero: Human) -> str:
        print(f"\nüéØ –•–æ–¥ {hero.name}:")
        print("1 - –û–±—ã—á–Ω–∞—è –∞—Ç–∞–∫–∞")
        print("2 - –û—Å–æ–±—ã–π –Ω–∞–≤—ã–∫")
        print("3 - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç")
        
        alive_targets = [t for t in [self.boss] + self.party if t.is_alive and t != hero]
        
        while True:
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-2): ").strip()
            
            if choice == "1":
                print("–¶–µ–ª–∏ –¥–ª—è –∞—Ç–∞–∫–∏:")
                for i, target in enumerate(alive_targets, 1):
                    print(f"  {i} - {target.name}")
                
                try:
                    target_idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: ")) - 1
                    if 0 <= target_idx < len(alive_targets):
                        return hero.attack(alive_targets[target_idx])
                    else:
                        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
            
            elif choice == "2":
                if isinstance(hero, Healer):
                    heal_targets = [t for t in self.party if t.is_alive]
                    print("–¶–µ–ª–∏ –¥–ª—è –∏—Å—Ü–µ–ª–µ–Ω–∏—è:")
                    for i, target in enumerate(heal_targets, 1):
                        print(f"  {i} - {target.name}")
                    
                    try:
                        target_idx = int(input("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: ")) - 1
                        if 0 <= target_idx < len(heal_targets):
                            return hero.special_skill([heal_targets[target_idx]])
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ü–µ–ª–∏")
                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
                else:
                    return hero.special_skill([self.boss])
    
    def run_game(self): #–∑–∞–ø—É—Å–∫sosat
        self.setup_game()
        
        while self.party_is_alive() and self.boss.is_alive:
            self.turn_count += 1
            self.display_status()
            
            turn_order = self.calculate_iniciativa()
            
            for combatant in turn_order:
                if not combatant.is_alive:
                    continue
                
                effect_result = combatant.process_effects()
                if effect_result:
                    print(f"üì¢ {effect_result}")
                
                if not combatant.is_alive:
                    continue
                
                if combatant == self.boss:
                    print(f"\nüëπ –•–æ–¥ {self.boss.name}:")
                    result = self.boss.special_skill(self.party)
                    print(f"  {result}")
                
                elif combatant in self.party:
                    result = self.player_turn(combatant)
                    print(f"  {result}")
                
                if not self.boss.is_alive or not self.party_is_alive():
                    break
            
            input("\n‚èé –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
        
        print(f"\n{'='*50}")
        if not self.boss.is_alive:
            print("üéâ –ü–û–ë–ï–î–ê! –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–±–µ–¥–∏–ª–∞ –±–æ—Å—Å–∞!")
        else:
            print("üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï! –ë–æ—Å—Å —É–Ω–∏—á—Ç–æ–∂–∏–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.")
        print(f"{'='*50}")


if name == "main":
    game = Game()
    game.run_game()

